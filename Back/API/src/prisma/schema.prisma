// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CLIENT
  ADMIN
  AGENT
}

model User {
  id                     String     @id @default(uuid())
  role                   Role       @default(CLIENT) //default role is client
  email                  String     @unique //client, agent
  name                   String //client, agent, admin
  password               String //client, agent, admin
  phone                  String? //client, agent
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  Houses                 House[] //agent, client
  visitsClient           Visit[]    @relation("ClientVisits") //client
  isSuperAdmin           Boolean?   @default(false) //admin
  isEmailVerified        Boolean    @default(false) // Novo campo para verificar o email
  emailVerificationToken String? // Token para verificar o email
  photo                  String? //client, agent, admin
  status                 UserStatus @default(PENDING) //admin,agent,client
  salt                   String //client, agent, admin
  favorites              Favorite[]
  ratingsGiven    Rating[] @relation("ClientRatings") // avaliações feitas (cliente)
  ratingsReceived Rating[] @relation("AgentRatings")  // avaliações recebidas (agente)

  @@map("users")
}

model House {
  id     String    @id @default(uuid())
  type   HouseType @relation(fields: [typeId], references: [id])
  typeId String

  agent          User         @relation(fields: [agentId], references: [id])
  agentId        String
  visits         Visit[]      @relation("HouseVisits")
  location       Location     @relation(fields: [locationId], references: [id])
  locationId     String       @unique
  title          String
  description    String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  images         String[]
  details        HouseDetails @relation(fields: [detailsId], references: [id])
  detailsId      String       @unique
  price          Float
  views          Int          @default(0) // <-- aqui!
  favorites      Favorite[]
  favoritesCount Int          @default(0) // Novo campo para contar os favoritos

  @@map("houses")
}

model Visit {
  id        String      @id @default(uuid())
  client    User        @relation("ClientVisits", fields: [clientId], references: [id])
  clientId  String
  house     House       @relation("HouseVisits", fields: [houseId], references: [id])
  houseId   String
  date      DateTime
  message   String?
  status    VisitStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@map("visits")
}

model HouseType {
  id     String  @id @default(uuid())
  name   String  @unique
  houses House[]
  @@map("house_type")

}

model Price {
  id    String @id @default(uuid())
  value Float

  @@map("prices")
}

model Location {
  id        String @id @default(uuid())
  address   String
  city      String
  zipCode   String
  latitude  Float
  longitude Float
  house     House?

  @@unique([address, city, zipCode, latitude, longitude])
  @@map("locations")
}

enum VisitStatus {
  PENDING
  CONFIRMED
  REJECTED
}

enum UserStatus {
  PENDING
  ACTIVE
  INACTIVE
}

model HouseDetails {
  id        String @id @default(uuid())
  rooms     Int
  bathrooms Int
  area      Float
  house     House?

  @@map("details")
}

model Favorite {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  house     House    @relation(fields: [houseId], references: [id])
  houseId   String
  createdAt DateTime @default(now())

  @@unique([userId, houseId]) // Um usuário só pode favoritar uma casa uma vez
  @@map("favorites")
}

model Rating {
  id        String   @id @default(uuid())
  agent     User     @relation("AgentRatings", fields: [agentId], references: [id])
  agentId   String
  client    User     @relation("ClientRatings", fields: [clientId], references: [id])
  clientId  String
  score     Int      // de 1 a 5
  comment   String?  // opcional
  createdAt DateTime @default(now())

  @@unique([agentId, clientId]) // Um cliente só pode avaliar um agente uma vez
  @@map("ratings")
}
